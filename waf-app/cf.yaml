AWSTemplateFormatVersion: '2010-09-09'
Description: The resources for the Raiffeisen WAF experiment.
Parameters:
  S3BucketName:
    Type: String
    Description: The name of the S3 bucket to be created.
  S3KeyName:
    Type: String
    Description: The name of the S3 key with the lambda code.
  S3ObjectVersion:
    Type: String
    Description: The version of the S3 object with the lambda code.
  AlbSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Comma separated list of the subnet IDs where the ALB shell reside.
  HostedZoneId:
    Type: String
    Description: The ID of the hosted zone that you want to create DNS records in. 
  DnsName:
    Type: String
    Description: The name of the DNS record that you want create. 
  VpcId:
    Type: String
    Description: The ID of the VPC for the security group.
  DashboardName:
    Type: String
    Description: The name of the dashboard. 
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  Lambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3KeyName
        S3ObjectVersion: !Ref S3ObjectVersion
      Handler: "aws-lambda"
      Role: !GetAtt LambdaRole.Arn
      Runtime: go1.x
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt Lambda.Arn
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Sub 'arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/*'
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaPermission
    Properties: 
      Targets: 
        - Id: !GetAtt Lambda.Arn
      TargetType: lambda
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Allow port 80 in"
      # SecurityGroupEgress: 
      #   - Egress
      SecurityGroupIngress: 
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          ToPort: 65535
          IpProtocol: tcp
      VpcId: !Ref VpcId
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Ref AlbSubnets
      Type: application
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - FixedResponseConfig: 
              ContentType: text/plain
              MessageBody: Service not working
              StatusCode: "503"
          Type: fixed-response
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  Route53Record:
    Type: AWS::Route53::RecordSet
    Properties: 
      Name: !Ref DnsName
      AliasTarget: 
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZoneId
      Type: A
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions: 
        - Field: host-header
          Values: 
            - !Ref DnsName
      ListenerArn: !Ref Listener
      Priority: 1
  WAF:
    Type: AWS::WAFv2::WebACL
    Properties: 
      DefaultAction: 
        Allow: 
          CustomRequestHandling:
            InsertHeaders:
            - Name: X-Processed-by-WAF
              Value: DefaultAllow
      Rules:
        - Name: CommonRuleSet
          OverrideAction: 
            None: {}
          Priority: 1
          Statement: 
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesCommonRuleSet
              VendorName: AWS
          VisibilityConfig: 
            CloudWatchMetricsEnabled: true
            MetricName: raiffeisen-waf-aws-common
            SampledRequestsEnabled: false
        - Name: KnownBadInputs
          OverrideAction: 
            None: {}
          Priority: 2
          Statement: 
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesKnownBadInputsRuleSet
              VendorName: AWS
          VisibilityConfig: 
            CloudWatchMetricsEnabled: true
            MetricName: raiffeisen-waf-aws-known-bad-inputs
            SampledRequestsEnabled: false
        - Name: Unix
          OverrideAction: 
            None: {}
          Priority: 3
          Statement: 
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesUnixRuleSet
              VendorName: AWS
          VisibilityConfig: 
            CloudWatchMetricsEnabled: true
            MetricName: raiffeisen-waf-aws-unix
            SampledRequestsEnabled: false
        - Name: Linux
          OverrideAction: 
            None: {}
          Priority: 4
          Statement: 
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesLinuxRuleSet
              VendorName: AWS
          VisibilityConfig: 
            CloudWatchMetricsEnabled: true
            MetricName: raiffeisen-waf-aws-linux
            SampledRequestsEnabled: false
        - Name: SqlInjection
          OverrideAction: 
            None: {}
          Priority: 5
          Statement: 
            ManagedRuleGroupStatement:
              Name: AWSManagedRulesSQLiRuleSet
              VendorName: AWS
          VisibilityConfig: 
            CloudWatchMetricsEnabled: true
            MetricName: raiffeisen-waf-aws-sqli
            SampledRequestsEnabled: false
      Scope: REGIONAL
      VisibilityConfig: 
        CloudWatchMetricsEnabled: true
        MetricName: raiffeisen-waf
        SampledRequestsEnabled: false
  WebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Ref LoadBalancer
      WebACLArn: !GetAtt WAF.Arn
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties: 
      DashboardName: !Ref DashboardName
      DashboardBody: |
           {
               "widgets": [
                   {
                       "type": "metric",
                       "x": 0,
                       "y": 0,
                       "width": 12,
                       "height": 6,
                       "properties": {
                           "view": "timeSeries",
                           "stacked": true,
                           "metrics": [
                               [ { "expression": "SELECT AVG(BlockedRequests) FROM SCHEMA(\"AWS/WAFV2\", LabelName,LabelNamespace,Region,WebACL) GROUP BY LabelNamespace, LabelName ORDER BY AVG() DESC LIMIT 5", "label": "Query1", "id": "q1" } ]
                           ],
                           "region": "eu-central-1",
                           "stat": "Average",
                           "period": 300,
                           "legend": {
                               "position": "right"
                           },
                           "yAxis": {
                               "left": {
                                   "label": "Blocked request (AVG)",
                                   "min": 0
                               }
                           },
                           "title": "Top Blocking Rules"
                       }
                   }
               ]
           }
